@page
@model Workspace.IndexModel
@using Topsis.Domain.Common
@{
    var currentStatus = Model.Data.Workspace.CurrentStatus;
    var hasReports = Model.Data.Workspace.IsFinalized() && Model.Data.Workspace.Reports?.Any() == true;
    var reportCount = Model.Data.Workspace.Reports?.Count() ?? 0;
    var noResultsMessage = string.Empty;
    var canVote = currentStatus == Domain.WorkspaceStatus.AcceptingVotes;
    var icon = string.Empty;
    switch (Model.Data.Workspace.CurrentStatus)
    {
        case Domain.WorkspaceStatus.Draft:
            noResultsMessage = "Workspace is not ready yet.";
            break;
        case Domain.WorkspaceStatus.Published:
            noResultsMessage = "Workspace voting not started yet.";
            break;
        case Domain.WorkspaceStatus.AcceptingVotes:
            noResultsMessage = hasReports 
                ? $"Based on the previous discussion you can make your adjustment vote."
                : $"Thank you for your vote.";
            break;
        case Domain.WorkspaceStatus.Finalized:
        case Domain.WorkspaceStatus.FinalizedWithFeedback:
            icon = "hourglass_top";
            noResultsMessage = "Workspace voting completed. Waiting for results.";
            break;
        case Domain.WorkspaceStatus.Archived:
            noResultsMessage = "Workspace has archived.";
            break;
        default:
            break;
    }
}

@section HeadScripts
{
    <environment include="Development">
        <script src="~/lib/chartjs/chart.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"
                integrity="sha512-Wt1bJGtlnMtGP0dqNFH1xlkLBNpEodaiQ8ZN5JLA5wpc1sUlk/O5uuOMNgvzddzkpvZ9GLyYNa8w2s7rqiTk5Q=="
                asp-fallback-src="~/lib/chartjs/chart.min.js"
                crossorigin="anonymous"
                referrerpolicy="no-referrer"></script>
    </environment>

    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
}

<div class="row pb-5">
    <div class="col-md-12">
        <h2>@Model.Data.Workspace.Title</h2>
        <p class="lead">@Model.Data.Workspace.Description</p>
        @if (hasReports == false)
        {
            <p class="text-warning">
                @if (string.IsNullOrEmpty(icon) == false)
                {
                    <span class="material-icons md-48">@icon</span>
                }
                @noResultsMessage
            </p>
        }

        @if (canVote)
        {
            <p>You can change your vote <a href="@Url.Page("Vote", new { id = Model.Data.Workspace.Id.Hash() })">here</a>.</p>
        }
    </div>
</div>


@if (hasReports)
{
    <div class="row">

        <div class="col-md-12">
            <h3>Prioritization</h3>
            <p class="lead">todo: Prioritization desc</p>

            <div class="col-md-3 float-md-right">
                <h5>Consensus</h5>
                <p class="lead">
                    <span class="badge @Model.CompareReport.MyBadgeCls">Me: @(Model.CompareReport.MyConsensus)%</span>&nbsp;<span class="badge @Model.CompareReport.AverageBadgeCls">Avg: @(Model.CompareReport.AverageConsensus)%</span>
                </p>
                
            </div>

            @if (Model.CompareReport.Tips.Any())
            {
            <div class="col-md-9 pt-2 text-center">
            
                @foreach (var item in Model.CompareReport.Tips)
                {
                    <div class='p-3 mb-2 bg-secondary text-light font-weight-bold'>Your vote on alternative [@item.AlternativeTitle] had the largest difference from the group solution.</div>
                }
            
            </div>
            }

            
            <canvas id="chAlternatives"></canvas>
        </div>

    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <h3>Consensus</h3>
            <p class="lead">todo: Consensus desc</p>
        </div>
        @*<div class="col-md-4">
            <canvas id="chCompareConsensus"></canvas>
        </div>*@

        <div class="col-md-8">
            <canvas id="chConsensus"></canvas>
        </div>

    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <h3>Categories</h3>
            <p class="lead">todo: Categories desc</p>
            <canvas id="chCategories"></canvas>
        </div>
    </div>

    @if (reportCount > 1)
    {
        <div class="row mt-5">
            <div class="col-md-12">
                <h3>Round Comparison</h3>
                <p class="lead">todo: Round Comparison desc</p>
                <canvas id="chReportComparison"></canvas>
            </div>
        </div>
    }
    
    @*<div class="row mt-5">
        <div class="col-md-12">
            <h3>Consensus</h3>
            <canvas id="chConsensusDegree"></canvas>
        </div>
    </div>*@
}
@section Scripts {

    <script>
        Chart.defaults.datasets.bar.minBarLength = 7;

        @*let configCompareConsensus = JSON.parse('@Html.Raw(Model.ConsensusCompareReportJson)');
        let compareChart = new Chart(document.getElementById('chCompareConsensus'), configCompareConsensus);*@

        let alternativesYLabels = JSON.parse('@Html.Raw(Model.AlternativesYLabelsJson)');
        let alternativesTicksCallback = function (value, idx) {
            return alternativesYLabels[idx];
        };

        let configAlternatives = JSON.parse('@Html.Raw(Model.AlternativesReportJson)');
        configAlternatives.options.scales['y'].ticks.callback = alternativesTicksCallback;

        let altChart = new Chart(document.getElementById('chAlternatives'), configAlternatives);

        let configConsensus = JSON.parse('@Html.Raw(Model.ConsensusReportJson)');
        let consensusChart = new Chart(document.getElementById('chConsensus'), configConsensus);

        let configCategories = JSON.parse('@Html.Raw(Model.CategoriesReportJson)');
        configCategories.options.scales['y'].ticks.callback = alternativesTicksCallback;
        let categoriesChart = new Chart(document.getElementById('chCategories'), configCategories);

        //let configConsensusDegree = JSON.parse('@Html.Raw(Model.ConsensusDegreeJson)');
        //let chConsensusDegreeChart = new Chart(document.getElementById('chConsensusDegree'), configConsensusDegree);

        if (@reportCount > 1) {
            let reportComparison = JSON.parse('@Html.Raw(Model.ReportComparisonJson)');
            let chReportComparison = new Chart(document.getElementById('chReportComparison'), reportComparison);
        }
    </script>
}

